//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PMS.Reporting.Datasets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Trial")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Trial : global::System.Data.DataSet {
        
        private TblRPTLEDGERDataTable tableTblRPTLEDGER;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Trial() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Trial(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TblRPTLEDGER"] != null)) {
                    base.Tables.Add(new TblRPTLEDGERDataTable(ds.Tables["TblRPTLEDGER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TblRPTLEDGERDataTable TblRPTLEDGER {
            get {
                return this.tableTblRPTLEDGER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Trial cln = ((Trial)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TblRPTLEDGER"] != null)) {
                    base.Tables.Add(new TblRPTLEDGERDataTable(ds.Tables["TblRPTLEDGER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTblRPTLEDGER = ((TblRPTLEDGERDataTable)(base.Tables["TblRPTLEDGER"]));
            if ((initTable == true)) {
                if ((this.tableTblRPTLEDGER != null)) {
                    this.tableTblRPTLEDGER.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Trial";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Trial.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTblRPTLEDGER = new TblRPTLEDGERDataTable();
            base.Tables.Add(this.tableTblRPTLEDGER);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTblRPTLEDGER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Trial ds = new Trial();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TblRPTLEDGERRowChangeEventHandler(object sender, TblRPTLEDGERRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TblRPTLEDGERDataTable : global::System.Data.TypedTableBase<TblRPTLEDGERRow> {
            
            private global::System.Data.DataColumn columnDATE;
            
            private global::System.Data.DataColumn columnVNO;
            
            private global::System.Data.DataColumn columnGLID;
            
            private global::System.Data.DataColumn columngl_l_name;
            
            private global::System.Data.DataColumn columnSLID;
            
            private global::System.Data.DataColumn columnSL_L_NAME;
            
            private global::System.Data.DataColumn columnop_dr_bal;
            
            private global::System.Data.DataColumn columnop_cr_bal;
            
            private global::System.Data.DataColumn columnDR_BAL;
            
            private global::System.Data.DataColumn columnCR_BAL;
            
            private global::System.Data.DataColumn columnamt;
            
            private global::System.Data.DataColumn columnamttype;
            
            private global::System.Data.DataColumn columnopbal;
            
            private global::System.Data.DataColumn columnnar;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnchqno;
            
            private global::System.Data.DataColumn columnbalbf;
            
            private global::System.Data.DataColumn columnglidslid;
            
            private global::System.Data.DataColumn columnrecondt;
            
            private global::System.Data.DataColumn columntrantype;
            
            private global::System.Data.DataColumn columnmdate;
            
            private global::System.Data.DataColumn columnclbal;
            
            private global::System.Data.DataColumn columnamtdr;
            
            private global::System.Data.DataColumn columnamtcr;
            
            private global::System.Data.DataColumn columnpl_bs_id;
            
            private global::System.Data.DataColumn columnactivate;
            
            private global::System.Data.DataColumn columnledger_name;
            
            private global::System.Data.DataColumn columnvchType;
            
            private global::System.Data.DataColumn columnvchdate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TblRPTLEDGERDataTable() {
                this.TableName = "TblRPTLEDGER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TblRPTLEDGERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TblRPTLEDGERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATEColumn {
                get {
                    return this.columnDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VNOColumn {
                get {
                    return this.columnVNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GLIDColumn {
                get {
                    return this.columnGLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gl_l_nameColumn {
                get {
                    return this.columngl_l_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIDColumn {
                get {
                    return this.columnSLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SL_L_NAMEColumn {
                get {
                    return this.columnSL_L_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn op_dr_balColumn {
                get {
                    return this.columnop_dr_bal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn op_cr_balColumn {
                get {
                    return this.columnop_cr_bal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DR_BALColumn {
                get {
                    return this.columnDR_BAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CR_BALColumn {
                get {
                    return this.columnCR_BAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amtColumn {
                get {
                    return this.columnamt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amttypeColumn {
                get {
                    return this.columnamttype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn opbalColumn {
                get {
                    return this.columnopbal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn narColumn {
                get {
                    return this.columnnar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chqnoColumn {
                get {
                    return this.columnchqno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn balbfColumn {
                get {
                    return this.columnbalbf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn glidslidColumn {
                get {
                    return this.columnglidslid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn recondtColumn {
                get {
                    return this.columnrecondt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trantypeColumn {
                get {
                    return this.columntrantype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mdateColumn {
                get {
                    return this.columnmdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clbalColumn {
                get {
                    return this.columnclbal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amtdrColumn {
                get {
                    return this.columnamtdr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amtcrColumn {
                get {
                    return this.columnamtcr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pl_bs_idColumn {
                get {
                    return this.columnpl_bs_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn activateColumn {
                get {
                    return this.columnactivate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ledger_nameColumn {
                get {
                    return this.columnledger_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vchTypeColumn {
                get {
                    return this.columnvchType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vchdateColumn {
                get {
                    return this.columnvchdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TblRPTLEDGERRow this[int index] {
                get {
                    return ((TblRPTLEDGERRow)(this.Rows[index]));
                }
            }
            
            public event TblRPTLEDGERRowChangeEventHandler TblRPTLEDGERRowChanging;
            
            public event TblRPTLEDGERRowChangeEventHandler TblRPTLEDGERRowChanged;
            
            public event TblRPTLEDGERRowChangeEventHandler TblRPTLEDGERRowDeleting;
            
            public event TblRPTLEDGERRowChangeEventHandler TblRPTLEDGERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTblRPTLEDGERRow(TblRPTLEDGERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TblRPTLEDGERRow AddTblRPTLEDGERRow(
                        System.DateTime DATE, 
                        string VNO, 
                        string GLID, 
                        string gl_l_name, 
                        string SLID, 
                        string SL_L_NAME, 
                        double op_dr_bal, 
                        double op_cr_bal, 
                        double DR_BAL, 
                        double CR_BAL, 
                        double amt, 
                        string amttype, 
                        double opbal, 
                        string nar, 
                        short type, 
                        string chqno, 
                        double balbf, 
                        string glidslid, 
                        System.DateTime recondt, 
                        string trantype, 
                        System.DateTime mdate, 
                        double clbal, 
                        double amtdr, 
                        double amtcr, 
                        short pl_bs_id, 
                        bool activate, 
                        string ledger_name, 
                        string vchType, 
                        string vchdate) {
                TblRPTLEDGERRow rowTblRPTLEDGERRow = ((TblRPTLEDGERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DATE,
                        VNO,
                        GLID,
                        gl_l_name,
                        SLID,
                        SL_L_NAME,
                        op_dr_bal,
                        op_cr_bal,
                        DR_BAL,
                        CR_BAL,
                        amt,
                        amttype,
                        opbal,
                        nar,
                        type,
                        chqno,
                        balbf,
                        glidslid,
                        recondt,
                        trantype,
                        mdate,
                        clbal,
                        amtdr,
                        amtcr,
                        pl_bs_id,
                        activate,
                        ledger_name,
                        vchType,
                        vchdate};
                rowTblRPTLEDGERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTblRPTLEDGERRow);
                return rowTblRPTLEDGERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TblRPTLEDGERDataTable cln = ((TblRPTLEDGERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TblRPTLEDGERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDATE = base.Columns["DATE"];
                this.columnVNO = base.Columns["VNO"];
                this.columnGLID = base.Columns["GLID"];
                this.columngl_l_name = base.Columns["gl_l_name"];
                this.columnSLID = base.Columns["SLID"];
                this.columnSL_L_NAME = base.Columns["SL_L_NAME"];
                this.columnop_dr_bal = base.Columns["op_dr_bal"];
                this.columnop_cr_bal = base.Columns["op_cr_bal"];
                this.columnDR_BAL = base.Columns["DR_BAL"];
                this.columnCR_BAL = base.Columns["CR_BAL"];
                this.columnamt = base.Columns["amt"];
                this.columnamttype = base.Columns["amttype"];
                this.columnopbal = base.Columns["opbal"];
                this.columnnar = base.Columns["nar"];
                this.columntype = base.Columns["type"];
                this.columnchqno = base.Columns["chqno"];
                this.columnbalbf = base.Columns["balbf"];
                this.columnglidslid = base.Columns["glidslid"];
                this.columnrecondt = base.Columns["recondt"];
                this.columntrantype = base.Columns["trantype"];
                this.columnmdate = base.Columns["mdate"];
                this.columnclbal = base.Columns["clbal"];
                this.columnamtdr = base.Columns["amtdr"];
                this.columnamtcr = base.Columns["amtcr"];
                this.columnpl_bs_id = base.Columns["pl_bs_id"];
                this.columnactivate = base.Columns["activate"];
                this.columnledger_name = base.Columns["ledger_name"];
                this.columnvchType = base.Columns["vchType"];
                this.columnvchdate = base.Columns["vchdate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDATE = new global::System.Data.DataColumn("DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE);
                this.columnVNO = new global::System.Data.DataColumn("VNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVNO);
                this.columnGLID = new global::System.Data.DataColumn("GLID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGLID);
                this.columngl_l_name = new global::System.Data.DataColumn("gl_l_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngl_l_name);
                this.columnSLID = new global::System.Data.DataColumn("SLID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLID);
                this.columnSL_L_NAME = new global::System.Data.DataColumn("SL_L_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSL_L_NAME);
                this.columnop_dr_bal = new global::System.Data.DataColumn("op_dr_bal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnop_dr_bal);
                this.columnop_cr_bal = new global::System.Data.DataColumn("op_cr_bal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnop_cr_bal);
                this.columnDR_BAL = new global::System.Data.DataColumn("DR_BAL", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDR_BAL);
                this.columnCR_BAL = new global::System.Data.DataColumn("CR_BAL", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCR_BAL);
                this.columnamt = new global::System.Data.DataColumn("amt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamt);
                this.columnamttype = new global::System.Data.DataColumn("amttype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamttype);
                this.columnopbal = new global::System.Data.DataColumn("opbal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnopbal);
                this.columnnar = new global::System.Data.DataColumn("nar", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnar);
                this.columntype = new global::System.Data.DataColumn("type", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnchqno = new global::System.Data.DataColumn("chqno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchqno);
                this.columnbalbf = new global::System.Data.DataColumn("balbf", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbalbf);
                this.columnglidslid = new global::System.Data.DataColumn("glidslid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnglidslid);
                this.columnrecondt = new global::System.Data.DataColumn("recondt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrecondt);
                this.columntrantype = new global::System.Data.DataColumn("trantype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrantype);
                this.columnmdate = new global::System.Data.DataColumn("mdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmdate);
                this.columnclbal = new global::System.Data.DataColumn("clbal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclbal);
                this.columnamtdr = new global::System.Data.DataColumn("amtdr", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamtdr);
                this.columnamtcr = new global::System.Data.DataColumn("amtcr", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamtcr);
                this.columnpl_bs_id = new global::System.Data.DataColumn("pl_bs_id", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpl_bs_id);
                this.columnactivate = new global::System.Data.DataColumn("activate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactivate);
                this.columnledger_name = new global::System.Data.DataColumn("ledger_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnledger_name);
                this.columnvchType = new global::System.Data.DataColumn("vchType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvchType);
                this.columnvchdate = new global::System.Data.DataColumn("vchdate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvchdate);
                this.columnVNO.MaxLength = 7;
                this.columnGLID.MaxLength = 5;
                this.columngl_l_name.MaxLength = 50;
                this.columnSLID.MaxLength = 10;
                this.columnSL_L_NAME.MaxLength = 60;
                this.columnamttype.MaxLength = 3;
                this.columnnar.MaxLength = 100;
                this.columnchqno.MaxLength = 10;
                this.columnglidslid.MaxLength = 15;
                this.columntrantype.MaxLength = 1;
                this.columnledger_name.MaxLength = 50;
                this.columnvchType.MaxLength = 50;
                this.columnvchdate.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TblRPTLEDGERRow NewTblRPTLEDGERRow() {
                return ((TblRPTLEDGERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TblRPTLEDGERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TblRPTLEDGERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TblRPTLEDGERRowChanged != null)) {
                    this.TblRPTLEDGERRowChanged(this, new TblRPTLEDGERRowChangeEvent(((TblRPTLEDGERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TblRPTLEDGERRowChanging != null)) {
                    this.TblRPTLEDGERRowChanging(this, new TblRPTLEDGERRowChangeEvent(((TblRPTLEDGERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TblRPTLEDGERRowDeleted != null)) {
                    this.TblRPTLEDGERRowDeleted(this, new TblRPTLEDGERRowChangeEvent(((TblRPTLEDGERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TblRPTLEDGERRowDeleting != null)) {
                    this.TblRPTLEDGERRowDeleting(this, new TblRPTLEDGERRowChangeEvent(((TblRPTLEDGERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTblRPTLEDGERRow(TblRPTLEDGERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Trial ds = new Trial();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TblRPTLEDGERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TblRPTLEDGERRow : global::System.Data.DataRow {
            
            private TblRPTLEDGERDataTable tableTblRPTLEDGER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TblRPTLEDGERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTblRPTLEDGER = ((TblRPTLEDGERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTblRPTLEDGER.DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATE\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VNO {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.VNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VNO\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.VNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GLID {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.GLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GLID\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.GLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gl_l_name {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.gl_l_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gl_l_name\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.gl_l_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SLID {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.SLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLID\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.SLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SL_L_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.SL_L_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SL_L_NAME\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.SL_L_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double op_dr_bal {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.op_dr_balColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'op_dr_bal\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.op_dr_balColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double op_cr_bal {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.op_cr_balColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'op_cr_bal\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.op_cr_balColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DR_BAL {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.DR_BALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DR_BAL\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.DR_BALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CR_BAL {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.CR_BALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CR_BAL\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.CR_BALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double amt {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amt\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amttype {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.amttypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amttype\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.amttypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double opbal {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.opbalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'opbal\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.opbalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nar {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.narColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nar\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.narColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short type {
                get {
                    try {
                        return ((short)(this[this.tableTblRPTLEDGER.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chqno {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.chqnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chqno\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.chqnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double balbf {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.balbfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'balbf\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.balbfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string glidslid {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.glidslidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'glidslid\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.glidslidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime recondt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTblRPTLEDGER.recondtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'recondt\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.recondtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trantype {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.trantypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'trantype\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.trantypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime mdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTblRPTLEDGER.mdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mdate\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.mdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double clbal {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.clbalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clbal\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.clbalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double amtdr {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.amtdrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amtdr\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.amtdrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double amtcr {
                get {
                    try {
                        return ((double)(this[this.tableTblRPTLEDGER.amtcrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amtcr\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.amtcrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short pl_bs_id {
                get {
                    try {
                        return ((short)(this[this.tableTblRPTLEDGER.pl_bs_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pl_bs_id\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.pl_bs_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool activate {
                get {
                    try {
                        return ((bool)(this[this.tableTblRPTLEDGER.activateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'activate\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.activateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ledger_name {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.ledger_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ledger_name\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.ledger_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vchType {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.vchTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'vchType\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.vchTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vchdate {
                get {
                    try {
                        return ((string)(this[this.tableTblRPTLEDGER.vchdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'vchdate\' in table \'TblRPTLEDGER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTblRPTLEDGER.vchdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATENull() {
                return this.IsNull(this.tableTblRPTLEDGER.DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATENull() {
                this[this.tableTblRPTLEDGER.DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVNONull() {
                return this.IsNull(this.tableTblRPTLEDGER.VNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVNONull() {
                this[this.tableTblRPTLEDGER.VNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGLIDNull() {
                return this.IsNull(this.tableTblRPTLEDGER.GLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGLIDNull() {
                this[this.tableTblRPTLEDGER.GLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgl_l_nameNull() {
                return this.IsNull(this.tableTblRPTLEDGER.gl_l_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgl_l_nameNull() {
                this[this.tableTblRPTLEDGER.gl_l_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIDNull() {
                return this.IsNull(this.tableTblRPTLEDGER.SLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIDNull() {
                this[this.tableTblRPTLEDGER.SLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSL_L_NAMENull() {
                return this.IsNull(this.tableTblRPTLEDGER.SL_L_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSL_L_NAMENull() {
                this[this.tableTblRPTLEDGER.SL_L_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isop_dr_balNull() {
                return this.IsNull(this.tableTblRPTLEDGER.op_dr_balColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setop_dr_balNull() {
                this[this.tableTblRPTLEDGER.op_dr_balColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isop_cr_balNull() {
                return this.IsNull(this.tableTblRPTLEDGER.op_cr_balColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setop_cr_balNull() {
                this[this.tableTblRPTLEDGER.op_cr_balColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDR_BALNull() {
                return this.IsNull(this.tableTblRPTLEDGER.DR_BALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDR_BALNull() {
                this[this.tableTblRPTLEDGER.DR_BALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCR_BALNull() {
                return this.IsNull(this.tableTblRPTLEDGER.CR_BALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCR_BALNull() {
                this[this.tableTblRPTLEDGER.CR_BALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamtNull() {
                return this.IsNull(this.tableTblRPTLEDGER.amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamtNull() {
                this[this.tableTblRPTLEDGER.amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamttypeNull() {
                return this.IsNull(this.tableTblRPTLEDGER.amttypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamttypeNull() {
                this[this.tableTblRPTLEDGER.amttypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsopbalNull() {
                return this.IsNull(this.tableTblRPTLEDGER.opbalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetopbalNull() {
                this[this.tableTblRPTLEDGER.opbalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnarNull() {
                return this.IsNull(this.tableTblRPTLEDGER.narColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnarNull() {
                this[this.tableTblRPTLEDGER.narColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableTblRPTLEDGER.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableTblRPTLEDGER.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IschqnoNull() {
                return this.IsNull(this.tableTblRPTLEDGER.chqnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetchqnoNull() {
                this[this.tableTblRPTLEDGER.chqnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbalbfNull() {
                return this.IsNull(this.tableTblRPTLEDGER.balbfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbalbfNull() {
                this[this.tableTblRPTLEDGER.balbfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsglidslidNull() {
                return this.IsNull(this.tableTblRPTLEDGER.glidslidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetglidslidNull() {
                this[this.tableTblRPTLEDGER.glidslidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrecondtNull() {
                return this.IsNull(this.tableTblRPTLEDGER.recondtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrecondtNull() {
                this[this.tableTblRPTLEDGER.recondtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrantypeNull() {
                return this.IsNull(this.tableTblRPTLEDGER.trantypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrantypeNull() {
                this[this.tableTblRPTLEDGER.trantypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmdateNull() {
                return this.IsNull(this.tableTblRPTLEDGER.mdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmdateNull() {
                this[this.tableTblRPTLEDGER.mdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclbalNull() {
                return this.IsNull(this.tableTblRPTLEDGER.clbalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclbalNull() {
                this[this.tableTblRPTLEDGER.clbalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamtdrNull() {
                return this.IsNull(this.tableTblRPTLEDGER.amtdrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamtdrNull() {
                this[this.tableTblRPTLEDGER.amtdrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamtcrNull() {
                return this.IsNull(this.tableTblRPTLEDGER.amtcrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamtcrNull() {
                this[this.tableTblRPTLEDGER.amtcrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispl_bs_idNull() {
                return this.IsNull(this.tableTblRPTLEDGER.pl_bs_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpl_bs_idNull() {
                this[this.tableTblRPTLEDGER.pl_bs_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactivateNull() {
                return this.IsNull(this.tableTblRPTLEDGER.activateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactivateNull() {
                this[this.tableTblRPTLEDGER.activateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isledger_nameNull() {
                return this.IsNull(this.tableTblRPTLEDGER.ledger_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setledger_nameNull() {
                this[this.tableTblRPTLEDGER.ledger_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvchTypeNull() {
                return this.IsNull(this.tableTblRPTLEDGER.vchTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvchTypeNull() {
                this[this.tableTblRPTLEDGER.vchTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvchdateNull() {
                return this.IsNull(this.tableTblRPTLEDGER.vchdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvchdateNull() {
                this[this.tableTblRPTLEDGER.vchdateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TblRPTLEDGERRowChangeEvent : global::System.EventArgs {
            
            private TblRPTLEDGERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TblRPTLEDGERRowChangeEvent(TblRPTLEDGERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TblRPTLEDGERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace PMS.Reporting.Datasets.TrialTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TblRPTLEDGERTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TblRPTLEDGERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TblRPTLEDGER";
            tableMapping.ColumnMappings.Add("DATE", "DATE");
            tableMapping.ColumnMappings.Add("VNO", "VNO");
            tableMapping.ColumnMappings.Add("GLID", "GLID");
            tableMapping.ColumnMappings.Add("gl_l_name", "gl_l_name");
            tableMapping.ColumnMappings.Add("SLID", "SLID");
            tableMapping.ColumnMappings.Add("SL_L_NAME", "SL_L_NAME");
            tableMapping.ColumnMappings.Add("op_dr_bal", "op_dr_bal");
            tableMapping.ColumnMappings.Add("op_cr_bal", "op_cr_bal");
            tableMapping.ColumnMappings.Add("DR_BAL", "DR_BAL");
            tableMapping.ColumnMappings.Add("CR_BAL", "CR_BAL");
            tableMapping.ColumnMappings.Add("amt", "amt");
            tableMapping.ColumnMappings.Add("amttype", "amttype");
            tableMapping.ColumnMappings.Add("opbal", "opbal");
            tableMapping.ColumnMappings.Add("nar", "nar");
            tableMapping.ColumnMappings.Add("type", "type");
            tableMapping.ColumnMappings.Add("chqno", "chqno");
            tableMapping.ColumnMappings.Add("balbf", "balbf");
            tableMapping.ColumnMappings.Add("glidslid", "glidslid");
            tableMapping.ColumnMappings.Add("recondt", "recondt");
            tableMapping.ColumnMappings.Add("trantype", "trantype");
            tableMapping.ColumnMappings.Add("mdate", "mdate");
            tableMapping.ColumnMappings.Add("clbal", "clbal");
            tableMapping.ColumnMappings.Add("amtdr", "amtdr");
            tableMapping.ColumnMappings.Add("amtcr", "amtcr");
            tableMapping.ColumnMappings.Add("pl_bs_id", "pl_bs_id");
            tableMapping.ColumnMappings.Add("activate", "activate");
            tableMapping.ColumnMappings.Add("ledger_name", "ledger_name");
            tableMapping.ColumnMappings.Add("vchType", "vchType");
            tableMapping.ColumnMappings.Add("vchdate", "vchdate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TblRPTLEDGER] ([DATE], [VNO], [GLID], [gl_l_name], [SLID], [SL_L_NAME], [op_dr_bal], [op_cr_bal], [DR_BAL], [CR_BAL], [amt], [amttype], [opbal], [nar], [type], [chqno], [balbf], [glidslid], [recondt], [trantype], [mdate], [clbal], [amtdr], [amtcr], [pl_bs_id], [activate], [ledger_name], [vchType], [vchdate]) VALUES (@DATE, @VNO, @GLID, @gl_l_name, @SLID, @SL_L_NAME, @op_dr_bal, @op_cr_bal, @DR_BAL, @CR_BAL, @amt, @amttype, @opbal, @nar, @type, @chqno, @balbf, @glidslid, @recondt, @trantype, @mdate, @clbal, @amtdr, @amtcr, @pl_bs_id, @activate, @ledger_name, @vchType, @vchdate)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DATE", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VNO", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GLID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GLID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gl_l_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gl_l_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SLID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SLID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SL_L_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SL_L_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@op_dr_bal", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "op_dr_bal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@op_cr_bal", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "op_cr_bal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DR_BAL", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DR_BAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CR_BAL", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CR_BAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@amt", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "amt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@amttype", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "amttype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@opbal", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "opbal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nar", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nar", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chqno", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqno", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@balbf", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "balbf", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@glidslid", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "glidslid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@recondt", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "recondt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trantype", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "trantype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mdate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mdate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@clbal", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "clbal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@amtdr", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "amtdr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@amtcr", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "amtcr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pl_bs_id", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pl_bs_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@activate", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "activate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ledger_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ledger_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@vchType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vchType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@vchdate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vchdate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PMS.Properties.Settings.Default.OfficeLaptopConn;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        TblRPTLEDGER.*\r\nFROM            TblRPTLEDGER";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Trial.TblRPTLEDGERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Trial.TblRPTLEDGERDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Trial.TblRPTLEDGERDataTable dataTable = new Trial.TblRPTLEDGERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Trial.TblRPTLEDGERDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Trial dataSet) {
            return this.Adapter.Update(dataSet, "TblRPTLEDGER");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<global::System.DateTime> DATE, 
                    string VNO, 
                    string GLID, 
                    string gl_l_name, 
                    string SLID, 
                    string SL_L_NAME, 
                    global::System.Nullable<double> op_dr_bal, 
                    global::System.Nullable<double> op_cr_bal, 
                    global::System.Nullable<double> DR_BAL, 
                    global::System.Nullable<double> CR_BAL, 
                    global::System.Nullable<double> amt, 
                    string amttype, 
                    global::System.Nullable<double> opbal, 
                    string nar, 
                    global::System.Nullable<short> type, 
                    string chqno, 
                    global::System.Nullable<double> balbf, 
                    string glidslid, 
                    global::System.Nullable<global::System.DateTime> recondt, 
                    string trantype, 
                    global::System.Nullable<global::System.DateTime> mdate, 
                    global::System.Nullable<double> clbal, 
                    global::System.Nullable<double> amtdr, 
                    global::System.Nullable<double> amtcr, 
                    global::System.Nullable<short> pl_bs_id, 
                    global::System.Nullable<bool> activate, 
                    string ledger_name, 
                    string vchType, 
                    string vchdate) {
            if ((DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((VNO == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(VNO));
            }
            if ((GLID == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(GLID));
            }
            if ((gl_l_name == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(gl_l_name));
            }
            if ((SLID == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SLID));
            }
            if ((SL_L_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(SL_L_NAME));
            }
            if ((op_dr_bal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(op_dr_bal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((op_cr_bal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(op_cr_bal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((DR_BAL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(DR_BAL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((CR_BAL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(CR_BAL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((amt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(amt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((amttype == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(amttype));
            }
            if ((opbal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(opbal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((nar == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(nar));
            }
            if ((type.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((short)(type.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((chqno == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(chqno));
            }
            if ((balbf.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(balbf.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((glidslid == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(glidslid));
            }
            if ((recondt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((System.DateTime)(recondt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((trantype == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(trantype));
            }
            if ((mdate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((System.DateTime)(mdate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((clbal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(clbal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((amtdr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(amtdr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((amtcr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((double)(amtcr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((pl_bs_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((short)(pl_bs_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((activate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((bool)(activate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((ledger_name == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(ledger_name));
            }
            if ((vchType == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(vchType));
            }
            if ((vchdate == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(vchdate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private TblRPTLEDGERTableAdapter _tblRPTLEDGERTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TblRPTLEDGERTableAdapter TblRPTLEDGERTableAdapter {
            get {
                return this._tblRPTLEDGERTableAdapter;
            }
            set {
                this._tblRPTLEDGERTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._tblRPTLEDGERTableAdapter != null) 
                            && (this._tblRPTLEDGERTableAdapter.Connection != null))) {
                    return this._tblRPTLEDGERTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._tblRPTLEDGERTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(Trial dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tblRPTLEDGERTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TblRPTLEDGER.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tblRPTLEDGERTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(Trial dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tblRPTLEDGERTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TblRPTLEDGER.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tblRPTLEDGERTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(Trial dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._tblRPTLEDGERTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TblRPTLEDGER.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tblRPTLEDGERTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(Trial dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._tblRPTLEDGERTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tblRPTLEDGERTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._tblRPTLEDGERTableAdapter != null)) {
                    revertConnections.Add(this._tblRPTLEDGERTableAdapter, this._tblRPTLEDGERTableAdapter.Connection);
                    this._tblRPTLEDGERTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tblRPTLEDGERTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tblRPTLEDGERTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tblRPTLEDGERTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tblRPTLEDGERTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._tblRPTLEDGERTableAdapter != null)) {
                    this._tblRPTLEDGERTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tblRPTLEDGERTableAdapter]));
                    this._tblRPTLEDGERTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591